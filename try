#!/bin/env php
<?php

set_include_path(
    get_include_path()
    . PATH_SEPARATOR . '/usr/share/pear'  // CentOS
    . PATH_SEPARATOR . '/usr/lib/php/PEAR'  // MacOS
    . PATH_SEPARATOR . './phplib' 
);

require_once 'Autoload.php';

function getOptions() {
    global $argv;

    $options = array(
        'jobs' => array(),
        'verbose' => false,
        'dry-run' => false,
        'patch' => null,
        'pretty' => false,
        'staged-only' => false,
        'poll_for_completion' => false,
        'callback' => null
        );

    // Using the evil @ operator here because Console_Getopt
    // is still PHP4 and spews a bunch of deprecation warnings:
    $ret = @Console_Getopt::getopt($argv, 'h?vnp:g:cPs');

    if ($ret instanceOf PEAR_Error) {
        error_log($ret->getMessage());
        showHelp();
    }

    list($opt, $args) = $ret;

    foreach ($opt as $tuple) {
        list($k, $v) = $tuple;

        switch($k) {
            case 'h':
            case '?':
                showHelp();
                break;

            case 'P':
                $options['poll_for_completion'] = true;
                $options['pretty'] = true;
                break;

            case 'v':
                $options['verbose'] = true;
                break;

            case 'n':
                $options['dry-run'] = true;
                break;

            case 'p':
                $options['patch'] = $v;
                break;

            case 'c':
                $options['poll_for_completion'] = true;
                break;

            case 's':
                $options['staged-only'] = true;
                break;

            case 'g':
                $options['callback'] = $v;
                break;
        }
    }

    if (count($args)) {
        $options['jobs'] = $args;
    }

    return $options;
}

/**
 * Display the help menu.
 */
function showHelp() {
    print <<<eof
USAGE: try [options] suite [tests ...]

OPTIONS:
    -h          show help
    -n          create diff, but do not send to Hudson
    -v          verbose (show shell commands as they're run)
    -p path     don't generate diffs; use custom patch file instead
    -c          poll for job completion and print results
    -P          print subtasks progressively as they complete (implies c)
    -s          use staged changes only to generate the diff
eof
;
    print "\n\n";
    exit(0);
}

function getRepoLocation($user) {
    $location = getenv('ETSY_SRC');
    if (!$location) {
        if (preg_match(";development/([^/]+);", getcwd(), $matches) > 0) {
            $location = "/home/$user/development/".$matches[1];
        } else {
            $location = "/home/$user/development/Etsyweb"; // Backwards compatibility
        }
    }
    return $location;
}

function getUser() {
    $user = getenv('LDAP_USER');  // LDAP_USER will override USER
    if (!$user) {
        $user = getenv("USER");
    }
    return $user;
}

function main() {
    $options = getOptions();

    $user = getUser();
    $location = getRepoLocation($user);

    $cmdRunner = new CommandRunner($options['verbose']);

    # Run checks
    $preChecks = array(
        new Precheck_BinaryFileSize($cmdRunner, $location),
        new Precheck_CopyAge($cmdRunner, $location)
    );

    foreach($preChecks as $c) {
        $c->check();
    }

    $repoManager = new RepoManager($location, $cmdRunner);

    # Generate diff if required
    $patch = $options['patch'];
    if (is_null($patch)) {
        $patch = $repoManager->generateDiff($options['staged-only']);
    }

    if ($options['dry-run']) {
        print "Not sending job to Jenkins (-n) diff is here: $patch\n";
        exit(0);
    }

    # Send to jenkins
    $jenkinsRunner = new JenkinsRunner(
        $cmdRunner,
        $repoManager->getRemotebranch("master"),
        $patch,
        $user
    );

    $callback = $options['callback'];

    $jenkinsRunner->startJenkinsJob($options['jobs']);

    if ($options['poll_for_completion'] || !is_null($callback)) {
        $jenkinsRunner->pollForCompletion($options['pretty']);
        $jenkinsRunner->executeCallback($callback);
    }
}

main();
